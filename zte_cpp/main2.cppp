// C++ program to print all paths from a source to destination.
#include<iostream>
#include <list>
#include <fstream> //定义读写已命名文件的类型
#include <sstream> //多定义的类型则用于读写存储在内存中的string对象
#include <vector>
//#include <unordered_map>
#include <ctime>
#include <map>
#include<set>

using namespace std;
clock_t time_start=clock();
int loop_n(8);
int cut(4);
//void search_all(map<int, vector<int> > *map_record,map<int, set<int> > *visited){
//
//};
map<int, vector<int> > map_record;
map<int,int> result;
//map<int, set<int> > visited;
//int path[14];
int helper[3000];
void search_helper(int k, int  key, int cnt){
    for(auto val: map_record[k]){
        if(map_record.count(val)){
            helper[val] = key;
            if(cnt == loop_n-cut) continue;
            search_helper(val, key, cnt + 1);
        }
        else continue;

    }
}

void df_search(int path[14], int cnt){
    if (cnt > loop_n)
        return;
//    int node = path.back();
    int node = path[cnt-1];
    if(map_record.count(node)){
        for(int& iter:map_record[node]){
//        for(vector<int>::iterator iter=map_record->at(node).begin();iter!=map_record->at(node).end();iter++){
            if(iter==path[0]){
                if(cnt>2)
                    result[cnt]+=1;
            }
            else if (iter>path[0]){
                bool flag=false;
                for(int i = 0; i < cnt-1; ++i){
                    if(path[i] == iter){
                       flag = true;
                       break;
                    }
                }
//                if(flag) continue;
                if(cnt>cut && (helper[iter]!=path[0]))
                    continue;
//                path.push_back(iter);
                path[cnt]=iter;
                df_search(path,cnt+1);
            }
        }
    }
    return;
}

int main()
{

    //读文件
    ifstream inFile("/Users/zon/Documents/zte_cpp/zte_cpp/Example0.csv",
                    ios::in);//inFile来自fstream,ifstream为输入文件流(从文件读入)
    string lineStr;
    vector<vector<string> > strArray;
    map<int, vector<int> > p_a;
    int n_a(0), n_b(0);
    int i(0), j(0);
//    getline(inFile,lineStr);
//    cout<<lineStr;
    while (getline(inFile, lineStr)) //getline来自sstream
    {
        //打印整行字符串
//        cout<<lineStr<<endl;
        //存成二维表结构
        stringstream ss(lineStr);//来自sstream
        string str;
        vector<string> lineArray;
        //按照逗号分隔
        j = 0;
        while (getline(ss, str, ',')) {
            if (str == "1" || str == "1\r")
//                cout << str;
                p_a[i].push_back(j);
//            lineArray.push_back(str);//一行数据以vector保存
            j++;
        }
        n_b = j;
        //cout<<lineArray[0]<<endl;
//        strArray.push_back(lineArray);//每一行vector数据都放到strArray中去
        i++;
    }
    n_a = i;
//    cout<<n_b;
    vector<int>::iterator iter;
    for (i = 0; i < n_a; i++) {
        iter = p_a[i].begin();
        while (iter != p_a[i].end()) {
            map_record[i].push_back(*iter + n_a);
            map_record[*iter + n_a].push_back(i);
            iter++;
        }
    }
    for (i = 0; i < n_a + n_b; i++) {
        sort(map_record[i].begin(), map_record[i].end());
    }
//    map<int,vector<int> > result,result_sorted;
    for (i = 4; i < loop_n + 1; i += 2) {
        result[i] = 0;
    }

//    for (i = 0; i < n_a + n_b; i++) {
//        cout << i << "+" << endl;
//        set<int> que;
//        que.insert(i);
//        for (j = 0; j < loop_n - cut; j++) {
//            set<int> que_new;
////            set<int>::iterator que_iter=que.begin();
////            for (set<int>::iterator que_iter = que.begin(); que_iter != que.end(); que_iter++) {
//              for(auto& que_iter:que){
////                for (vector<int>::iterator map_iter = map_record[*que_iter].begin();
////                     map_iter != map_record[*que_iter].end(); map_iter++) {
//                for(auto& map_iter:map_record[que_iter]){
//                    que_new.insert(map_iter);
//                    visited[map_iter].insert(i);
//                }
//            }
//            que = que_new;
//        }
//    }
        for(int i = 0; i < n_a; i++){
            clock_t time_mid = clock();
                   cout << i << "#" << endl;
            search_helper(i, i, 1);
//            for(auto item: map_record[i]){
//                if(map_record.count(item))
//                    helper[item] = -i-1;
//            }
            int path[14];
            path[0]=0;
            df_search(path, 1);
    
            map_record.erase(i);
            clock_t time_end = clock();
            cout << "time use:" << (time_end - time_mid) / (double) CLOCKS_PER_SEC << "s" << endl;
        }
    clock_t time_end = clock();
//    cout << "time use:" << (time_end - time_start) / (double) CLOCKS_PER_SEC << "s" << endl;
//    for (i = 0; i < n_a; i++) {
//        clock_t time_mid = clock();
//        cout << i << "#" << endl;
//        vector<int> path;
//        path.push_back(i);
//        df_search(path, 1);
//        clock_t time_end = clock();
//        cout << "time use:" << (time_end - time_mid) / (double) CLOCKS_PER_SEC << "s" << endl;
//    }
    for (i = 4; i < loop_n + 1; i += 2) {
        cout << i << ":" << result[i] << endl;
    }
    time_end = clock();
    cout << "time use:" << (time_end - time_start) / (double) CLOCKS_PER_SEC << "s" << endl;
    return 0;

}
